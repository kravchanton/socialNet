{"version":3,"sources":["components/Dialogs/Dialogs.module.css","hoc/withAuthRedirect.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/DialogMessages.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","mapStateToPropsFotRedirect","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","DialogItem","path","id","className","s","dialog","name","Message","message","src","userPhoto","alt","time","maxLength","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","TextArea","placeholder","validate","required","Dialogs","dialogsElements","dialogs","map","t","messegesElements","messages","dialogsItem","values","addMessage","newMessageBody","mapStateToProps","newMessageText","messagesPage","mapDispatchToProps","dispatch","onNewMessageChange","text","updateNewMessageActionCreator","newMessage","addMessageActionCreator","compose"],"mappings":"mGACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,SAAW,0BAA0B,KAAO,wB,gICSxIC,EAA6B,SAACC,GAAD,MAA6C,CAC5EC,OAAQD,EAAME,KAAKD,SAGd,SAASE,EAAqBC,GAQnC,OADuCC,YAAQN,EAARM,EANvC,SAA2BC,GACzB,IAAKL,EAAwBK,EAAxBL,OAAWM,EAAhB,YAA6BD,EAA7B,GACA,OAAKL,EACE,cAACG,EAAD,eAAeG,IADF,cAAC,IAAD,CAAUC,GAAI,gB,gMCAvBC,EAR8B,SAACH,GAC1C,IAAII,EAAO,YAAcJ,EAAMK,GAC/B,OAAO,qBAAKC,UAAWC,IAAEC,OAAlB,SACH,cAAC,IAAD,CAASN,GAAIE,EAAb,SAAoBJ,EAAMS,U,QCUnBC,EAXwB,SAACV,GACpC,OACI,sBAAKM,UAAWC,IAAEI,QAAlB,UACI,qBACIC,IAAKC,IACLC,IAAI,KAHZ,eAG4B,4BAAId,EAAMW,UAClC,sBAAML,UAAWC,IAAEQ,KAAnB,uB,kCCgCNC,EAAYC,YAAiB,KAc7BC,EAAsBC,YAA8B,CAACC,KAAM,wBAArCD,EAX4C,SAACnB,GACrE,OACI,uBAAMqB,SAAUrB,EAAMsB,aAAtB,UACI,cAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUhB,KAAK,iBAAiBiB,YAAY,qBACvDC,SAAU,CAACC,IAAUZ,KAC5B,uDAOGa,EAxCC,SAAC7B,GAEb,IAAI8B,EAAkB9B,EAAM+B,QAAQC,KAAI,SAACC,GAAD,OAAO,cAAC,EAAD,CAAYxB,KAAMwB,EAAExB,KAAMJ,GAAI4B,EAAE5B,QAC3E6B,EAAmBlC,EAAMmC,SAASH,KAAI,SAACC,GAAD,OAAO,cAAC,EAAD,CAAStB,QAASsB,EAAEtB,aAIrE,OACI,sBAAKL,UAAWC,IAAEwB,QAAlB,UACI,qBAAKzB,UAAWC,IAAE6B,YAAlB,SACKN,IAEL,sBAAKxB,UAAWC,IAAE4B,SAAlB,UACKD,EACD,cAAChB,EAAD,CAAqBG,SAVb,SAACgB,GACjBrC,EAAMsC,WAAWD,EAAOE,0B,yBCXnBC,EAAkB,SAAC9C,GAC5B,MAAO,CACH+C,eAAgB/C,EAAMgD,aAAaD,eACnCV,QAASrC,EAAMgD,aAAaX,QAC5BI,SAAUzC,EAAMgD,aAAaP,WAIxBQ,EAAqB,SAACC,GAC/B,MAAO,CACHC,mBAAoB,SAACC,GACjBF,EAASG,YAA8BD,KAG3CR,WAAY,SAACU,GACTJ,EAASK,YAAwBD,OAK9BE,sBACXnD,YAAQyC,EAAiBG,GACzB9C,IAFWqD,CAGbrB","file":"static/js/4.e72a9426.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3yVcV\",\"dialogsItem\":\"Dialogs_dialogsItem__1H0bJ\",\"messages\":\"Dialogs_messages__16Vhu\",\"time\":\"Dialogs_time__2oWwV\"};","import {Redirect} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport { ComponentType } from \"react\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n  isAuth: boolean\r\n}\r\nlet mapStateToPropsFotRedirect = (state: AppStateType): MapStatePropsType => ({\r\n  isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirect <T>(Component: ComponentType<T>) {\r\n  function RedirectComponent(props: MapStatePropsType) {\r\n    let {isAuth, ...restProps} = props\r\n    if (!isAuth) return <Redirect to={'/login'}/>\r\n    return <Component {...restProps as T}/>\r\n  }\r\n\r\n  let connetctedFuthRedirectComponent =  connect(mapStateToPropsFotRedirect)(RedirectComponent)\r\n  return connetctedFuthRedirectComponent\r\n}","import React from \"react\";\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport type DialogItemType = {\r\n    name: string\r\n    id: string\r\n}\r\n\r\nconst DialogItem: React.FC<DialogItemType> = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n    return <div className={s.dialog}>\r\n        <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\n\r\nexport default DialogItem;","import React from \"react\";\r\nimport s from './../Dialogs.module.css';\r\nimport userPhoto from \"../../../assets/images/user.png\";\r\n\r\n\r\nexport  type MessageType = {\r\n    message: string\r\n    id?: string\r\n}\r\n\r\n\r\nconst Message: React.FC<MessageType> = (props) => {\r\n    return (\r\n        <div className={s.message}>\r\n            <img\r\n                src={userPhoto}\r\n                alt=\"\"/>            <p>{props.message}</p>\r\n            <span className={s.time}>11:00</span>\r\n        </div>\r\n\r\n    )\r\n}\r\nexport default Message;","import React from \"react\";\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/DialogMessages\";\r\nimport {ActionType, DialogsType, MessagesType} from \"../../redux/store\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {TextArea} from \"../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\nexport type MessagesPageType = {\r\n    dialogs: Array<DialogsType>\r\n    messages: Array<MessagesType>\r\n    dispatch?: (action: ActionType) => void\r\n}\r\n\r\nexport type DialogsPropsType = {\r\n    onNewMessageChange: (text: string) => void\r\n    addMessage: (text: string) => void\r\n    dialogs: Array<DialogsType>\r\n    messages: Array<MessagesType>\r\n    newMessageText: string\r\n\r\n}\r\n\r\nconst Dialogs = (props: DialogsPropsType) => {\r\n\r\n    let dialogsElements = props.dialogs.map((t) => <DialogItem name={t.name} id={t.id}/>)\r\n    let messegesElements = props.messages.map((t) => <Message message={t.message}/>)\r\n    let addNewMessage = (values: AddMessageFormType) => {\r\n        props.addMessage(values.newMessageBody)\r\n    }\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItem}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                {messegesElements}\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n\r\n\r\n            </div>\r\n        </div>)\r\n}\r\n\r\ntype AddMessageFormType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst maxLength = maxLengthCreator(100)\r\n\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<AddMessageFormType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field component={TextArea} name='newMessageBody' placeholder='Enter your message'\r\n                   validate={[required, maxLength]}/>\r\n            <button>Add message</button>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nconst AddMessageFormRedux = reduxForm<AddMessageFormType>({form: 'dialogAddMessageForm'})(AddMessageForm)\r\nexport default Dialogs;","import React from \"react\";\r\nimport {ActionType, DialogsType, MessagesType, RootStateType} from \"../../redux/store\";\r\nimport {addMessageActionCreator, updateNewMessageActionCreator} from \"../../redux/dialogs_reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\nexport type MessagesPageType = {\r\n    dialogs: Array<DialogsType>\r\n    messages: Array<MessagesType>\r\n    newMessageText: string\r\n    dispatch?: (action: ActionType) => void\r\n}\r\n\r\n\r\nexport const mapStateToProps = (state: RootStateType) => {\r\n    return {\r\n        newMessageText: state.messagesPage.newMessageText,\r\n        dialogs: state.messagesPage.dialogs,\r\n        messages: state.messagesPage.messages,\r\n    }\r\n}\r\n\r\nexport const mapDispatchToProps = (dispatch: any) => {\r\n    return {\r\n        onNewMessageChange: (text: string) => {\r\n            dispatch(updateNewMessageActionCreator(text))\r\n        },\r\n\r\n        addMessage: (newMessage: string) => {\r\n            dispatch(addMessageActionCreator(newMessage))\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);"],"sourceRoot":""}