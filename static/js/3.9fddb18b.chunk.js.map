{"version":3,"sources":["hoc/withAuthRedirect.tsx","components/Profile/ProfileInfo/profileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/MyPost.module.css","components/Profile/ProfileInfo/ProfileStatuswithHooks.tsx","components/Profile/ProfileInfo/profileInfo.tsx","components/Profile/MyPosts/Post/MyPost.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/profile.tsx","components/Profile/profileContainer.tsx"],"names":["mapStateToPropsFotRedirect","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","module","exports","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onChange","e","currentTarget","value","onBlur","updateStatus","ProfileInfo","profile","photos","className","classes","wrapper","logo","src","large","userPhoto","alt","profileInfo","fullName","aboutMe","contacts","facebook","vk","github","Preloader","MyPost","content","message","likesCount","maxLength","maxLengthCreator","AddPostFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","TextArea","name","placeholder","validate","required","MyPostsContainer","posts","profilePage","dispatch","addPost","text","addPostActionCreator","postsElements","reverse","map","t","postsBlock","addPostBody","Profile","ProfileContainerAPI","userId","this","match","params","id","history","push","getProfile","getStatus","React","compose","withRouter"],"mappings":"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","file":"static/js/3.9fddb18b.chunk.js","sourcesContent":["import {Redirect} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\nimport {connect} from \"react-redux\";\r\nimport { ComponentType } from \"react\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n  isAuth: boolean\r\n}\r\nlet mapStateToPropsFotRedirect = (state: AppStateType): MapStatePropsType => ({\r\n  isAuth: state.auth.isAuth\r\n})\r\n\r\nexport function withAuthRedirect <T>(Component: ComponentType<T>) {\r\n  function RedirectComponent(props: MapStatePropsType) {\r\n    let {isAuth, ...restProps} = props\r\n    if (!isAuth) return <Redirect to={'/login'}/>\r\n    return <Component {...restProps as T}/>\r\n  }\r\n\r\n  let connetctedFuthRedirectComponent =  connect(mapStateToPropsFotRedirect)(RedirectComponent)\r\n  return connetctedFuthRedirectComponent\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"profileInfo_wrapper__3eyco\",\"profileInfo\":\"profileInfo_profileInfo__1h1nc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"MyPosts_content__1OSW2\",\"postsBlock\":\"MyPosts_postsBlock__IRIfO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"MyPost_wrapper__3nwDC\",\"content\":\"MyPost_content__Dj0mz\"};","import React, {useEffect, useState} from \"react\";\r\n\r\n\r\nexport const ProfileStatusWithHooks = (props: any) => {\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n    let [status, setStatus] = useState<string>(props.status)\r\n\r\n\r\n    useEffect(() => {\r\n            setStatus(props.status)\r\n        }, [props.status])\r\n\r\n\r\n    let activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    let deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    let onStatusChange = (e: any) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n    return (<div>\r\n        {!editMode &&\r\n        <div><span onDoubleClick={activateEditMode}>Status: {status || \"----\"}</span></div>\r\n        }\r\n        {\r\n            editMode &&\r\n            <div><input autoFocus={true} onChange={onStatusChange} value={status} onBlur={deactivateEditMode}/></div>\r\n        }\r\n    </div>)\r\n}\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport classes from './profileInfo.module.css';\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport userPhoto from \"../../../assets/images/user.png\";\r\nimport {ProfileStatusWithHooks} from \"./ProfileStatuswithHooks\";\r\n\r\nconst ProfileInfo = (props: any) => {\r\n    if (!props.profile.photos) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div className={classes.wrapper}>\r\n            <div className={classes.logo}><img\r\n                src={props.profile.photos.large ? props.profile.photos.large : userPhoto}\r\n                alt=\"\"/>\r\n                <div> <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/></div>\r\n            </div>\r\n            <div className={classes.profileInfo}>\r\n                <div>Full Name: {props.profile.fullName}</div>\r\n\r\n                <div>About Me: {props.profile.aboutMe}</div>\r\n                <ul className={classes.contacts}>Contacts: <li>{!props.profile.contacts.facebook && 'facebook'}</li>\r\n                    <li>{!props.profile.contacts.vk && 'vk'}</li>\r\n                    <li>{!props.profile.contacts.github && 'github'}</li>\r\n                </ul>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default ProfileInfo;","import React from \"react\";\r\nimport classes from './MyPost.module.css';\r\nimport {PostsType} from \"../../../../redux/store\";\r\nimport userPhoto from \"../../../../assets/images/user.png\";\r\n\r\n\r\nconst MyPost = (props: PostsType) => {\r\n    return (\r\n        <div className={classes.wrapper}>\r\n            <div><img\r\n                src={userPhoto}\r\n                alt=\"\"/></div>\r\n            <div className={classes.content}>\r\n                {props.message}\r\n            </div>\r\n            <div>Likes {props.likesCount}</div>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default MyPost;","import React from \"react\";\r\nimport classes from './MyPosts.module.css';\r\nimport MyPost from \"./Post/MyPost\";\r\nimport {PostsType} from \"../../../redux/store\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {TextArea} from \"../../common/FormsControls/FormsControls\";\r\n\r\n\r\nexport type MyPostsPropsType = {\r\n    posts: Array<PostsType>\r\n    addPost: (text: string) => void\r\n}\r\n\r\nexport const MyPosts = (props: MyPostsPropsType) => {\r\n\r\n\r\n    let onAddPost = (value: AddPostType) => {\r\n        props.addPost(value.addPostBody)\r\n    }\r\n\r\n    let postsElements = props.posts.reverse().map((t) => <MyPost message={t.message} likesCount={t.likesCount}/>)\r\n    return (\r\n        <div className={classes.postsBlock}>\r\n            My post\r\n            <div>\r\n                <AddPostFormRedux onSubmit={onAddPost}/>\r\n            </div>\r\n            <div>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype AddPostType ={\r\n    addPostBody: string\r\n}\r\n\r\nconst maxLength = maxLengthCreator(10)\r\nconst AddNewPostForm: React.FC<InjectedFormProps<AddPostType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={TextArea} name='addPostBody' placeholder='Enter your post' validate={[required, maxLength]}/>\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddPostFormRedux = reduxForm<AddPostType>({form: 'profileAddMessageForm'})(AddNewPostForm)\r\n","import React from \"react\";\r\nimport {MyPosts} from \"./MyPosts\"\r\nimport {addPostActionCreator} from \"../../../redux/profile_reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootStateType} from \"../../../redux/store\";\r\n\r\n\r\nconst mapStateToProps = (state: RootStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n    return {\r\n        addPost: (text: string) => {\r\n            dispatch(addPostActionCreator(text))\r\n        },\r\n    }\r\n}\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\nexport default MyPostsContainer;","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/profileInfo\";\r\nimport {AddActionType} from \"../../redux/profile_reducer\";\r\nimport {PostsType} from \"../../redux/store\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\n\r\nexport type ProfilePageType = {\r\n    posts: Array<PostsType>\r\n    addPost?: () => void\r\n    dispatch?: (action: AddActionType) => void\r\n    profile: any\r\n    status: string\r\n\r\n}\r\nexport type ProfileType = {\r\n    aboutMe: string\r\n    contacts: {\r\n        facebook: string\r\n        website: string\r\n        vk:string\r\n        twitter: string\r\n        instagram: string\r\n        youtube: string\r\n        github: string\r\n        mainLink: string\r\n    }\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    userId: number\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n}\r\n\r\nexport const Profile = (props: any) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profilePage.profile} status={props.profilePage.status} updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer/>\r\n        </div>)\r\n}\r\nexport default Profile;","import React from \"react\";\r\nimport {\r\n    getProfile,\r\n    getStatus,\r\n    updateStatus\r\n} from \"../../redux/profile_reducer\";\r\nimport Profile from \"./profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\n\r\n\r\n\r\n\r\ntype MapDispatchPropsType = {\r\n    getProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: number,\r\n}\r\n\r\n\r\n\r\n// @ts-ignore\r\nexport type PropsType = MapStateToPropsType & MapDispatchPropsType & RouteComponentProps<PathParamsType>\r\n\r\nclass ProfileContainerAPI extends React.Component<PropsType, any> {\r\n\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.id;\r\n            if(!userId) {\r\n                this.props.history.push('/Login')\r\n            }\r\n        }\r\n        this.props.getProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    render() {\r\n        return <Profile {...this.props} profilePage={this.props.profilePage} updateStatus={this.props.updateStatus} />\r\n    }\r\n\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n    profilePage: state.profilePage,\r\n    id: state.auth.id\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getProfile, getStatus, updateStatus}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainerAPI)\r\n"],"sourceRoot":""}